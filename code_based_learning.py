import os
from openai import OpenAI
import pandas as pd
from dataAgent import DataAgent  # Import the DataAgent class

class CodeBasedModel:
    def __init__(self, api_key=None, competition_directory=None):
        """
        Initialize the Code-Based Model with OpenAI API key and data directory.
        
        Args:
            api_key (str, optional): OpenAI API key. Defaults to environment variable.
            competition_directory (str, optional): Path to competition data directory.
        """
        # Set up API key
        self.api_key = api_key or os.getenv("")

        # Check if API key is available
        if not self.api_key:
            raise ValueError(
                "OpenAI API key is required. Either pass it as api_key parameter or "
                "set the OPENAI_API_KEY environment variable."
            )

        # Initialize OpenAI client
        self.api_key = api_key or os.getenv("OPENAI_API_KEY")

        # Set up DataAgent
        self.agent = DataAgent()
        self.competition_directory = competition_directory or os.path.join(os.path.dirname(__file__), "competition")
        self.agent.load_data(self.competition_directory)
        self.client = OpenAI(api_key=self.api_key)

    def query_gpt_code(self, csv_data, column_names, question):
        """
        Queries OpenAI's GPT model to generate Python code for answering the question.
        """
        prompt = f"""
        You are an AI assistant that generates Python code to answer questions based on a tabular dataset.

        Here is a dataset in pandas dataframe format:
        ```python
        import pandas as pd
        from io import StringIO

        data = '''{csv_data}'''
        df = pd.read_csv(StringIO(data))
        ```

        The dataset contains the following columns: {', '.join(column_names)}

        Extract only the necessary columns and write Python code to answer:
        "{question}"

        Write a Python function `answer(df)` that computes the result.

        The function should return only the final answer as a string.

        Please answer the following question in JSON format:

        Example response:
        {{
            "answer": "<your answer>",
            "columns_used": ["<column1>", "<column2>"],
            "explanation": "<brief reasoning>"
        }}
        """

        response = self.client.chat.completions.create(
            model="gpt-3.5-turbo",  # Use "gpt-4" if available
            messages=[
                {"role": "system", "content": "You are a data analyst answering questions about tabular data."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=150,
            temperature=0
        )

        return response.choices[0].message.content.strip()

    def execute_generated_code(self, code, df):
        """
        Executes the generated Python code in a safe environment.
        
        Args:
            code (str): The Python code generated by the LLM.
            df (pandas.DataFrame): The dataset in pandas format.
        
        Returns:
            str: The computed answer.
        """
        try:
            # Define a local scope dictionary to execute code safely
            local_scope = {"df": df}
            
            # Execute the generated code
            exec(code, {}, local_scope)

            # Fetch the answer from the executed function
            answer = local_scope.get("answer", "No answer returned.")
            return str(answer)

        except Exception as e:
            return f"Error executing code: {str(e)}"

    def get_csv_data(self, dataset_name, dataset_type="sample"):
        """
        Retrieve CSV data as a string using DataAgent.
        
        Args:
            dataset_name (str): The competition dataset folder name.
            dataset_type (str): Either 'sample' or 'all' (default: 'sample').

        Returns:
            str: CSV content as a string.
        """
        if dataset_name in self.agent.data and dataset_type in self.agent.data[dataset_name]:
            csv_data = self.agent.data[dataset_name][dataset_type]  # Retrieve data list
            return "\n".join([",".join(row) for row in csv_data])  # Convert to CSV string
        else:
            raise FileNotFoundError(f"Dataset {dataset_name}/{dataset_type}.csv not found.")

    def ask_question(self, dataset_name, question, dataset_type="sample"):
        """
        Ask a question about a dataset using the code-based approach.
        
        Args:
            dataset_name (str): The competition dataset folder name.
            question (str): The question to ask about the dataset.
            dataset_type (str): Either 'sample' or 'all' (default: 'sample').
            
        Returns:
            str: The computed answer.
        """
        # Load dataset as a string
        csv_data = self.get_csv_data(dataset_name, dataset_type)
        column_names = self.agent.extract_column_names(csv_data)

        # Convert CSV string into a Pandas DataFrame
        from io import StringIO
        df = pd.read_csv(StringIO(csv_data))

        # Get Python code from GPT
        generated_code = self.query_gpt_code(csv_data, column_names, question)
        print("\n Generated Code:\n", generated_code)

        # Execute the generated code and return the answer
        return self.execute_generated_code(generated_code, df)


